<!-- livebook:{"persist_outputs":true} -->

# 2023 Advent of Code Day 8

```elixir
Mix.install([
  {:kino, "~> 0.7.0"},
  {:explorer, "~> 0.4.0"}
])
```

<!-- livebook:{"output":true} -->

```
:ok
```

## Treetop Tree House

The expedition comes across a peculiar patch of tall trees all planted carefully in a grid. The Elves explain that a previous expedition planted these trees as a reforestation effort. Now, they're curious if this would be a good location for a tree house.

First, determine whether there is enough tree cover here to keep a tree house hidden. To do this, you need to count the number of trees that are visible from outside the grid when looking directly along a row or column.

The Elves have already launched a quadcopter to generate a map with the height of each tree (your puzzle input). For example:

```
30373
25512
65332
33549
35390
```

Each tree is represented as a single digit whose value is its height, where 0 is the shortest and 9 is the tallest.

A tree is visible if all of the other trees between it and an edge of the grid are shorter than it. Only consider trees in the same row or column; that is, only look up, down, left, or right from any given tree.

All of the trees around the edge of the grid are visible - since they are already on the edge, there are no trees to block the view. In this example, that only leaves the interior nine trees to consider:

* The top-left 5 is visible from the left and top. (It isn't visible from the right or bottom since other trees of height 5 are in the way.)
* The top-middle 5 is visible from the top and right.
* The top-right 1 is not visible from any direction; for it to be visible, there would need to only be trees of height 0 between it and an edge.
* The left-middle 5 is visible, but only from the right.
* The center 3 is not visible from any direction; for it to be visible, there would need to be only trees of at most height 2 between it and an edge.
* The right-middle 3 is visible from the right.
* In the bottom row, the middle 5 is visible, but the 3 and 4 are not.

With 16 trees visible on the edge and another 5 visible in the interior, a total of 21 trees are visible in this arrangement.

Consider your map; how many trees are visible from outside the grid?

## Read in the Data

```elixir
frame = Kino.Frame.new() |> Kino.render()

input = Kino.Input.textarea("strategy")
```

1. Read in data
2. Parse into lines
3. Parse lines into integers
4. Load into DataFrame
5. Pivot rows to colums

```elixir
defmodule Processor do
  def load_data(data) do
    data
    |> String.split("\n")
    |> Enum.map(fn s ->
      String.splitter(s, "", trim: true)
      |> Enum.map(fn height -> {height, "U"} end)
    end)
  end

  def mark_visible_rows(table) do
    rows = Enum.count(table)
    Enum.with_index(table, fn row, index -> mark_visible_trees(row, index, rows) end)
  end

  def mark_visible_trees(row, index, last_row) when index == 0 or index + 1 == last_row do
    Enum.map(row, fn {tree, _} -> {tree, "V"} end)
  end

  def mark_visible_trees(row, index, last_row) do
    columns = Enum.count(row)

    {new_row, _} =
      Enum.map_reduce(row, -1, fn {height, visiblity}, acc ->
        cond do
          "V" == visiblity -> {{height, visiblity}, max(acc, height)}
          height > acc -> {{height, "V"}, height}
          true -> {{height, visiblity}, max(acc, height)}
        end
      end)

    new_row
  end

  def reverse_rows(table) do
    Enum.map(table, fn row -> Enum.reverse(row) end)
  end

  def transpose(rows) do
    rows
    |> List.zip()
    |> Enum.map(&Tuple.to_list/1)
  end
end

dirs =
  Kino.Input.read(input)
  |> Processor.load_data()
  # From left
  |> Processor.mark_visible_rows()
  |> Processor.reverse_rows()
  # From right
  |> Processor.mark_visible_rows()
  # Restore order
  |> Processor.reverse_rows()
  # Pivot rows/columns
  |> Processor.transpose()
  # From "top"
  |> Processor.mark_visible_rows()
  |> Processor.reverse_rows()
  # From "bottom"
  |> Processor.mark_visible_rows()
  # Restore left/right order
  |> Processor.reverse_rows()
  # Restore order
  |> Processor.transpose()
  |> List.flatten()
  |> Enum.count(fn {_, visiblity} -> visiblity == "V" end)
```

<!-- livebook:{"output":true} -->

```
warning: variable "columns" is unused (if the variable is not meant to be used, prefix it with an underscore)
  projects/2022-advent-of-code/day-08-treetop-tree-house.livemd#cell:hrm6ik7kp6ywprqeusqtzbojjlxxtyhd:21: Processor.mark_visible_trees/3

warning: variable "index" is unused (if the variable is not meant to be used, prefix it with an underscore)
  projects/2022-advent-of-code/day-08-treetop-tree-house.livemd#cell:hrm6ik7kp6ywprqeusqtzbojjlxxtyhd:20: Processor.mark_visible_trees/3

warning: variable "last_row" is unused (if the variable is not meant to be used, prefix it with an underscore)
  projects/2022-advent-of-code/day-08-treetop-tree-house.livemd#cell:hrm6ik7kp6ywprqeusqtzbojjlxxtyhd:20: Processor.mark_visible_trees/3

```

<!-- livebook:{"output":true} -->

```
21
```
